// Test des endpoints de chat pour le syst√®me Fleet Wise Operations
console.log('üöÄ D√©marrage des tests des endpoints de chat...');

const BASE_URL = 'http://localhost:5000';
const INTERVENTION_ID = 1; // ID d'intervention pour le test

async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return await response.json();
  } catch (error) {
    console.error(`Erreur requ√™te vers ${url}:`, error.message);
    throw error;
  }
}

async function testChatEndpoints() {
  console.log('üì± Test des endpoints de chat pour l\'intervention', INTERVENTION_ID);
  console.log('=' .repeat(60));

  try {
    // Test 1: R√©cup√©rer les messages du chat
    console.log('\nüì® Test 1: GET /api/interventions/:id/chat');
    const messages = await makeRequest(`${BASE_URL}/api/interventions/${INTERVENTION_ID}/chat`);
    console.log(`   ‚úÖ ${messages.length} messages r√©cup√©r√©s`);

    // Test 2: Cr√©er un nouveau message
    console.log('\nüí¨ Test 2: POST /api/interventions/:id/chat - Message texte');
    const messageData = {
      LIB100: 'Message chat',
      COMMENTAIRE: 'Bonjour, ceci est un message de test depuis le chat !',
      CDUSER: 'TST',
    };

    const newMessage = await makeRequest(`${BASE_URL}/api/interventions/${INTERVENTION_ID}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(messageData),
    });
    
    console.log(`   ‚úÖ Message cr√©√© avec ID: ${newMessage.IDACTION}`);

    // Test 3: Cr√©er un message de r√©ponse
    console.log('\n‚Ü©Ô∏è Test 3: POST /api/interventions/:id/chat - Message de r√©ponse');
    const replyData = {
      LIB100: 'Message chat',
      COMMENTAIRE: 'Ceci est une r√©ponse au message pr√©c√©dent',
      CDUSER: 'TST',
      REPLY_TO: newMessage.IDACTION,
    };

    const replyMessage = await makeRequest(`${BASE_URL}/api/interventions/${INTERVENTION_ID}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(replyData),
    });
    
    console.log(`   ‚úÖ R√©ponse cr√©√©e avec ID: ${replyMessage.IDACTION}`);

    // Test 4: V√©rifier les messages mis √† jour
    console.log('\nüì® Test 4: GET /api/interventions/:id/chat - Messages mis √† jour');
    const updatedMessages = await makeRequest(`${BASE_URL}/api/interventions/${INTERVENTION_ID}/chat`);
    console.log(`   ‚úÖ ${updatedMessages.length} messages apr√®s ajouts`);
    
    if (updatedMessages.length > 0) {
      const lastMessage = updatedMessages[updatedMessages.length - 1];
      console.log(`   üìÑ Dernier message: ID=${lastMessage.IDACTION}, REPLY_TO=${lastMessage.REPLY_TO || 'aucun'}`);
    }

    // Test 5: Simuler un partage de fichier
    console.log('\nüìé Test 5: Partage de fichier via chat');
    const fileMessageData = {
      LIB100: 'Photo partag√©e',
      COMMENTAIRE: 'Photo: test-photo.jpg',
      CDUSER: 'TST',
    };

    const fileMessage = await makeRequest(`${BASE_URL}/api/interventions/${INTERVENTION_ID}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(fileMessageData),
    });
    
    console.log(`   ‚úÖ Message fichier cr√©√© avec ID: ${fileMessage.IDACTION}`);

    // Cr√©er un document li√© √† ce message
    const documentData = {
      LIB100: 'test-photo.jpg',
      FILEREF: 'test-photo.jpg',
      COMMENTAIRE: 'Partag√© dans le chat: test-photo.jpg',
      CDUSER: 'TST',
      ID2GENRE_DOCUMENT: 1, // 1=Image
      TRGCIBLE: `ACT${fileMessage.IDACTION}`,
    };

    const newDocument = await makeRequest(`${BASE_URL}/api/interventions/${INTERVENTION_ID}/documents`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(documentData),
    });
    
    console.log(`   ‚úÖ Document li√© cr√©√© avec ID: ${newDocument.IDDOCUMENT || newDocument.ID}`);

    console.log('\nüéâ TOUS LES TESTS ONT R√âUSSI !');
    console.log('=' .repeat(60));
    console.log('‚ú® Le syst√®me de chat est op√©rationnel et pr√™t √† √™tre utilis√©');

  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DES TESTS:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
  }
}

// Fonction pour v√©rifier si le serveur est pr√™t
async function waitForServer() {
  console.log('‚è≥ Attente du serveur...');
  let retries = 10;
  
  while (retries > 0) {
    try {
      const response = await fetch(`${BASE_URL}/api/db-test`);
      if (response.ok) {
        console.log('‚úÖ Serveur pr√™t !');
        return true;
      }
    } catch (error) {
      // Serveur pas encore pr√™t
    }
    
    retries--;
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  throw new Error('Le serveur ne r√©pond pas apr√®s 10 tentatives');
}

// Point d'entr√©e principal
async function main() {
  try {
    await waitForServer();
    await testChatEndpoints();
  } catch (error) {
    console.error('‚ùå Impossible de lancer les tests:', error.message);
    process.exit(1);
  }
}

// Lancer les tests si ce fichier est ex√©cut√© directement
if (require.main === module) {
  main();
}

module.exports = { testChatEndpoints, waitForServer }; 
setTimeout(testChatEndpoints, 3000); 